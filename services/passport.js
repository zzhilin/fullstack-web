const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

//fetch sth out of mongoose
//create model class
const User = mongoose.model('users');

// get the profile we created below
passport.serializeUser((user, done) => {
	done(null, user.id); //identify user later on
	// profile id === google id
	// user id === id generated by mongo in db
});

passport.deserializeUser((id, done) => {
	User.findById(id).then((user) => {
		done(null, user);
	});
});

// make passport aware that there's a new strategy available
// callback URL: show where users are redirected to after granted permission
// accessToken: token to modify some user content
// refreshToken: refresh access token
passport.use(
	new GoogleStrategy(
		{
			clientID: keys.googleClientID,
			clientSecret: keys.googleClientSecret,
			callbackURL: '/auth/google/callback'
		},
		//call done func and done
		(accessToken, refreshToken, profile, done) => {
			// check if there's an existing user
			// this is async that returns a promise
			User.findOne({ googleId: profile.id }).then((existingUser) => {
				if (existingUser) {
					// we already have a profile
					//1st: everything is fine
					//second: user profile
					done(null, existingUser);
				} else {
					// we need to make new record
					//create model instance and save
					// here we have 2 user instances that are the same
					// we always use the newest one
					new User({ googleId: profile.id }).save().then((user) => done(null, user));
				}
			});
		}
	)
);
